name: BuildAndDeploy

on: [push]

jobs:
  # Build artifacts for the chili2
  chili2:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        path: knx-iot-embedded

    - name: cache compiler
      id: cache-compiler
      uses: actions/cache@v1
      env:
        cache-name: cache-gcc-arm
      with:
        path: ${{ github.workspace }}/gcc-arm-none-eabi-9-2019-q4-major
        key: gcc-arm-none-eabi-9-2019-q4-major-x86_64-linux

    - name: download compiler
      if: steps.cache-compiler.outputs.cache-hit != 'true'
      run: |
        wget https://developer.arm.com/-/media/Files/downloads/gnu-rm/9-2019q4/RC2.1/gcc-arm-none-eabi-9-2019-q4-major-x86_64-linux.tar.bz2
        tar xjf gcc-arm-none-eabi-9-2019-q4-major-x86_64-linux.tar.bz2

    - name: enable compiler
      run: |
        echo "${{ github.workspace }}/gcc-arm-none-eabi-9-2019-q4-major/bin" >> $GITHUB_PATH

    # We configure non-ocf chili build first because building OCF adds bloat to MBedTls, which increases all openthread binary sizes.
    - name: configure embedded build
      run: |
        arm-none-eabi-gcc --version
        cmake -S ${{ github.workspace }}/knx-iot-embedded -B ${{ github.workspace }}/build -DCMAKE_TOOLCHAIN_FILE=arm_gcc_m2351.cmake
      continue-on-error: true

    # # ~CascodaPrivStart (This is for autoremoval of this section in the release script)
    # - name: build Chili2D-USB-OCF-OTA
    #   run: |
    #     mkdir ${{ github.workspace }}/build-chili2-ota
    #     cmake -S ${{ github.workspace }}/cascoda-sdk -B ${{ github.workspace }}/build-chili2-ota  -DCMAKE_TOOLCHAIN_FILE=toolchain/arm_gcc_m2351.cmake -DCASCODA_BUILD_OCF=ON -DCASCODA_BUILD_OCF_PKI=ON  -DCASCODA_BUILD_SECURE_LWM2M=OFF -DCASCODA_CHILI_FLASH_PAGES=16 -DCASCODA_OPENTHREAD_MESSAGE_BUFS=61 -DCASCODA_EXTERNAL_FLASHCHIP_PRESENT=ON -DCASCODA_OTA_UPGRADE_ENABLED=ON
    #     make -C ${{ github.workspace }}/build-chili2-ota -j4 ocf-light ocf-reed-light
    #     cp ${{ github.workspace }}/build-chili2-ota/bin/ocf-*.bin ${{ github.workspace }}/upload-usb
    # # ~CascodaPrivEnd (This ends the autoremoval section)

    # - name: Upload Chili2S-UART0-1Mbaud
    #   uses: actions/upload-artifact@v1.0.0
    #   with:
    #     name: Chili2S-UART0-1Mbaud
    #     path: ${{ github.workspace }}/upload-uart

    # - name: Upload Chili2D-USB
    #   uses: actions/upload-artifact@v1.0.0
    #   with:
    #     name: Chili2D-USB
    #     path: ${{ github.workspace }}/upload-usb

    # - name: Upload Chili2-Lib
    #   uses: actions/upload-artifact@v1.0.0
    #   with:
    #     name: Chili2-Lib
    #     path: ${{ github.workspace }}/upload-lib

  # # If we're on master, make a release
  # makerelease:
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/master'
  #   needs: [windows, chili2]

  #   # Checkout the code, and fetch all tags (for version)
  #   steps:
  #   - uses: actions/checkout@v2
  #     with:
  #       fetch-depth: 0
  #       path: cascoda-sdk
  #   - run: |
  #       cd cascoda-sdk
  #       git fetch --tags

  #   # Figure out what we're going to call the release, and the release body
  #   - name: Release info
  #     id: releaseinfo
  #     run: |
  #       cd cascoda-sdk
  #       echo ::set-output name=version::$(git describe --dirty --always --long | sed -E 's/-g[0-9a-f]+//g')
  #       echo ::set-output name=title::$(git show -s --format=%B | head -n1)

  #       msg=$(git show -s --format=%B)
  #       #escape special chars
  #       msg="${msg//'%'/'%25'}"
  #       msg="${msg//$'\n'/'%0A'}"
  #       msg="${msg//$'\r'/'%0D'}"
  #       echo ::set-output name=msg::$msg

  #   # Create a release to publish to
  #   - name: Create Release
  #     id: create_release
  #     uses: actions/create-release@v1
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     with:
  #       tag_name: ${{ steps.releaseinfo.outputs.version }}
  #       release_name: ${{ steps.releaseinfo.outputs.title }}
  #       body: ${{ steps.releaseinfo.outputs.msg }}

  #   # Download all of the previously uploaded artifacts
  #   - uses: actions/download-artifact@v1
  #     with:
  #       name: Chili2D-USB
  #   - uses: actions/download-artifact@v1
  #     with:
  #       name: Chili2S-UART0-1Mbaud
  #   - uses: actions/download-artifact@v1
  #     with:
  #       name: Windows-SDK

  #   - uses: dawidd6/action-download-artifact@v2.24.0
  #     with:
  #       github_token: ${{secrets.CASCODA_PRIVATE}}
  #       branch: master
  #       name: Chili2-Lib
  #       path: ./Chili2-Lib
  #       repo: Cascoda/cascoda-sdk-priv
  #       workflow: build.yml
  #       check_artifacts: true
  #       search_artifacts: true

  #   # Zip them back up
  #   - name: Zip the release assets
  #     run: |
  #       zip -r Chili2D-USB.zip Chili2D-USB
  #       zip -r Chili2S-UART0-1Mbaud.zip Chili2S-UART0-1Mbaud
  #       zip -r Windows-SDK.zip Windows-SDK
  #       zip Chili2-Lib.zip Chili2-Lib/*

  #   # Release the artifacts to the just created release
  #   - name: Release Chili USB
  #     uses: actions/upload-release-asset@v1
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     with:
  #       upload_url: ${{steps.create_release.outputs.upload_url}}
  #       asset_path: ./Chili2D-USB.zip
  #       asset_name: Chili2D-USB.zip
  #       asset_content_type: application/zip
  #   - name: Release Chili Libraries
  #     uses: actions/upload-release-asset@v1
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     with:
  #       upload_url: ${{steps.create_release.outputs.upload_url}}
  #       asset_path: ./Chili2-Lib.zip
  #       asset_name: Chili2-Lib.zip
  #       asset_content_type: application/zip
  #   - name: Release Chili UART
  #     uses: actions/upload-release-asset@v1
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     with:
  #       upload_url: ${{steps.create_release.outputs.upload_url}}
  #       asset_path: ./Chili2S-UART0-1Mbaud.zip
  #       asset_name: Chili2S-UART0-1Mbaud.zip
  #       asset_content_type: application/zip
  #   - name: Release Windows
  #     uses: actions/upload-release-asset@v1
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     with:
  #       upload_url: ${{steps.create_release.outputs.upload_url}}
  #       asset_path: ./Windows-SDK.zip
  #       asset_name: Windows-SDK.zip
  #       asset_content_type: application/zip
